AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: TripTrek API with Lambda, DynamoDB, and pre-signed S3 upload support

Globals:
  Function:
    Runtime: nodejs22.x
    Timeout: 10
    Environment:
      Variables:
        AWS_REGION: !Ref AWS::Region

Parameters:
  ImageUploadBucket:
    Type: String
    Description: S3 bucket for uploaded location images
    Default: triptrek-location-images

Resources:

  TripTrekTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST


  TripTrekAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: TripTrekAPI
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - PATCH
          - DELETE
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
  LocationImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ImageUploadBucket
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - PUT
              - POST
              - GET
            AllowedHeaders:
              - "*"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  createTrip:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createTrip
      Handler: index.handler
      CodeUri: create/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TripTrekTable
      Events:
        ApiForMyApp:
          Type: HttpApi
          Properties:
            Path: /createTrip
            Method: POST
            ApiId: !Ref TripTrekAPI

  getTripList:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getTripList
      Handler: index.handler
      CodeUri: read/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TripTrekTable
      Events:
        ApiForMyApp:
          Type: HttpApi
          Properties:
            Path: /getTripList
            Method: GET
            ApiId: !Ref TripTrekAPI

  updateTrip:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: updateTrip
      Handler: index.handler
      CodeUri: update/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TripTrekTable
      Events:
        ApiForMyApp:
          Type: HttpApi
          Properties:
            Path: /updateTrip
            Method: PATCH
            ApiId: !Ref TripTrekAPI

  deleteTrip:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteTrip
      Handler: index.handler
      CodeUri: delete/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TripTrekTable
      Events:
        ApiForMyApp:
          Type: HttpApi
          Properties:
            Path: /deleteTrip
            Method: DELETE
            ApiId: !Ref TripTrekAPI

<<<<<<< HEAD
  imageUploader:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: imageUploader
      Handler: index.handler
      Runtime: nodejs22.x
      CodeUri: images/
      Environment:
        Variables:
          LOCATION_IMAGES_BUCKET: !Ref ImageUploadBucket
      Policies:
        - S3WritePolicy:
            BucketName: !Ref ImageUploadBucket
=======
  saveImageMetadata:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: saveImageMetadata
      Handler: saveImageMetadata.handler
      CodeUri: saveImageMetadata/
      Environment:
        Variables:
          TABLE_NAME: !Ref TripTrekTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TripTrekTable
      Events:
        ApiForMyApp:
          Type: HttpApi
          Properties:
            Path: /saveImageMetadata
            Method: POST
            ApiId: !Ref TripTrekAPI

  generateUploadUrl:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: generateUploadUrl
      Handler: index.handler
      CodeUri: generateUploadUrl/
      Environment:
        Variables:
          BUCKET_NAME: my-location-images-bucket
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - s3:PutObject
            Resource: arn:aws:s3:::my-location-images-bucket/uploads/*
>>>>>>> origin/main
      Events:
        ApiForMyApp:
          Type: HttpApi
          Properties:
            Path: /generateUploadUrl
            Method: POST
            ApiId: !Ref TripTrekAPI

<<<<<<< HEAD

Outputs:
  ApiUrl:
    Description: "HTTP API endpoint base URL"
    Value: !Sub "https://${TripTrekAPI}.execute-api.${AWS::Region}.amazonaws.com"
  LocationImagesBucketName:
    Value: !Ref LocationImagesBucket
=======
Outputs:
  TripTrekApiUrl:
    Description: "TripTrek HTTP API Endpoint"
    Value: !Sub "https://${TripTrekAPI}.execute-api.${AWS::Region}.amazonaws.com"

>>>>>>> origin/main
